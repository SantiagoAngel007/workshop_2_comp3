name: CI Pipeline

# Se ejecuta en push a main/develop/dev y en todos los PRs
on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]

jobs:
  # Job 1: Validar c√≥digo y pruebas
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    # Servicio de PostgreSQL para las pruebas
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Instalar dependencias
      - name: Install dependencies
        run: npm ci

      # 4. Linter (ESLint)
      - name: Run ESLint
        run: npm run lint

      # 5. Formateo (Prettier check)
      - name: Check code formatting
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

      # 6. Build del proyecto
      - name: Build project
        run: npm run build

      # 7. Ejecutar pruebas unitarias con coverage
      - name: Run unit tests with coverage
        run: npm run test:cov
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          JWT_SECRET: test-jwt-secret-key-for-ci

      # 8. Validar umbrales de cobertura
      - name: Validate coverage thresholds
        run: |
          echo "============================================"
          echo "VALIDATING COVERAGE THRESHOLDS"
          echo "============================================"
          
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "‚ùå Coverage summary not found!"
            exit 1
          fi
          
          # Extraer m√©tricas de cobertura
          STATEMENTS=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.statements.pct)")
          BRANCHES=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.branches.pct)")
          FUNCTIONS=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.functions.pct)")
          LINES=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.lines.pct)")
          
          echo "üìä Coverage Results:"
          echo "   Statements: ${STATEMENTS}% (required: ‚â•85%)"
          echo "   Branches:   ${BRANCHES}% (required: ‚â•83%)"
          echo "   Functions:  ${FUNCTIONS}% (required: ‚â•85%)"
          echo "   Lines:      ${LINES}% (required: ‚â•85%)"
          echo ""
          
          # Validar umbrales
          FAILED=false
          
          if (( $(echo "$STATEMENTS < 85" | bc -l) )); then
            echo "‚ùå Statements coverage is below 85% (${STATEMENTS}%)"
            FAILED=true
          else
            echo "‚úÖ Statements coverage passed"
          fi
          
          if (( $(echo "$BRANCHES < 83" | bc -l) )); then
            echo "‚ùå Branches coverage is below 83% (${BRANCHES}%)"
            FAILED=true
          else
            echo "‚úÖ Branches coverage passed"
          fi
          
          if (( $(echo "$FUNCTIONS < 85" | bc -l) )); then
            echo "‚ùå Functions coverage is below 85% (${FUNCTIONS}%)"
            FAILED=true
          else
            echo "‚úÖ Functions coverage passed"
          fi
          
          if (( $(echo "$LINES < 85" | bc -l) )); then
            echo "‚ùå Lines coverage is below 85% (${LINES}%)"
            FAILED=true
          else
            echo "‚úÖ Lines coverage passed"
          fi
          
          if [ "$FAILED" = true ]; then
            echo ""
            echo "üí• Coverage validation FAILED! Please improve test coverage."
            exit 1
          else
            echo ""
            echo "üéâ All coverage thresholds passed!"
          fi

      # 9. Mostrar reporte detallado de cobertura
      - name: Display detailed coverage report
        if: always()
        run: |
          echo ""
          echo "============================================"
          echo "DETAILED COVERAGE REPORT"
          echo "============================================"
          echo ""
          echo "üìÑ Coverage by file (top 20 files):"
          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
          if [ -f coverage/lcov-report/index.html ]; then
            echo "Full HTML report generated at: coverage/lcov-report/index.html"
          fi
          
          # Mostrar archivos con menor cobertura
          if [ -f coverage/coverage-summary.json ]; then
            echo ""
            echo "üìâ Files with lowest branch coverage:"
            cat coverage/coverage-summary.json | node -e "
              const data = JSON.parse(require('fs').readFileSync(0, 'utf-8'));
              const files = Object.entries(data)
                .filter(([key]) => key !== 'total')
                .map(([file, stats]) => ({ file: file.replace(process.cwd() + '/', ''), branches: stats.branches.pct }))
                .sort((a, b) => a.branches - b.branches)
                .slice(0, 10);
              
              files.forEach(({file, branches}) => {
                const status = branches < 83 ? '‚ùå' : branches < 90 ? '‚ö†Ô∏è' : '‚úÖ';
                console.log(\`\${status} \${branches}% - \${file}\`);
              });
            "
          fi

      # 10. Subir reporte de cobertura como artefacto
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.run_number }}
          path: coverage/
          retention-days: 30

      # 11. Comentar resultados en PR (si es un PR)
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('coverage/coverage-summary.json')) {
              return;
            }
            
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const comment = `## üìä Coverage Report
            
            | Metric | Percentage | Status |
            |--------|------------|--------|
            | Statements | ${total.statements.pct}% | ${total.statements.pct >= 85 ? '‚úÖ' : '‚ùå'} |
            | Branches | ${total.branches.pct}% | ${total.branches.pct >= 83 ? '‚úÖ' : '‚ùå'} |
            | Functions | ${total.functions.pct}% | ${total.functions.pct >= 85 ? '‚úÖ' : '‚ùå'} |
            | Lines | ${total.lines.pct}% | ${total.lines.pct >= 85 ? '‚úÖ' : '‚ùå'} |
            
            **Minimum thresholds:** Statements ‚â•85%, Branches ‚â•83%, Functions ‚â•85%, Lines ‚â•85%
            
            ${total.statements.pct >= 85 && total.branches.pct >= 83 && total.functions.pct >= 85 && total.lines.pct >= 85 
              ? 'üéâ All coverage thresholds passed!' 
              : '‚ö†Ô∏è Some coverage thresholds not met. Please add more tests.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 2: Validar Docker build (opcional)
  docker:
    name: Docker Build Check
    runs-on: ubuntu-latest
    needs: test # Solo ejecutar si las pruebas pasan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.check_dockerfile.outputs.exists == 'true'
        run: docker build -t workshop-app:test .

  # Job 3: Verificaci√≥n de seguridad b√°sica
  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          npm audit || echo "‚ö†Ô∏è Security vulnerabilities found, but not blocking CI"

      - name: Check for secrets in code
        run: |
          echo "üîç Checking for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" src/ --include="*.ts" --exclude-dir=node_modules | grep -v "PASSWORD\|SECRET\|KEY\|TOKEN" | grep -E "(=|:)" | head -5; then
            echo "‚ö†Ô∏è Potential secrets found in code. Please review."
            echo "Note: This is just a warning, CI will continue."
          else
            echo "‚úÖ No obvious secrets found in source code."
          fi
