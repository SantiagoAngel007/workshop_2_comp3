name: Pre-Push Validation

# Este workflow valida cambios antes de que se hagan push
on:
  push:
    branches: [dev, develop, feature/*, fix/*, hotfix/*]
  pull_request:
    branches: [main, develop, dev]

jobs:
  # Validaci√≥n r√°pida para branches de desarrollo
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: |
          echo "üîç Running TypeScript type check..."
          bun run build --noEmit || bun x tsc --noEmit

      - name: Lint check
        run: |
          echo "üßπ Running ESLint..."
          bun run lint

      - name: Quick tests (unit tests only)
        run: |
          echo "üß™ Running quick unit tests..."
          bun run test --passWithNoTests --testPathIgnorePatterns="e2e"
        env:
          NODE_ENV: test

  # Validaci√≥n completa para PRs importantes
  full-validation:
    name: Full Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run full test suite
        run: bun run test:cov
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          JWT_SECRET: test-jwt-secret-key-for-ci

      - name: Check test coverage requirements
        run: |
          echo "üìä Checking coverage requirements for PR..."
          
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "‚ùå No coverage report found!"
            exit 1
          fi
          
          STATEMENTS=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.statements.pct)")
          BRANCHES=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.branches.pct)")
          FUNCTIONS=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.functions.pct)")
          LINES=$(cat coverage/coverage-summary.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf-8')).total.lines.pct)")
          
          echo "Current coverage:"
          echo "  üìù Statements: ${STATEMENTS}%"
          echo "  üåø Branches:   ${BRANCHES}%"
          echo "  üéØ Functions:  ${FUNCTIONS}%"
          echo "  üìè Lines:      ${LINES}%"
          
          # Verificar si cumple con los requisitos m√≠nimos
          FAILED=false
          
          if (( $(echo "$STATEMENTS < 85" | bc -l) )); then
            echo "‚ùå Statements coverage below 85%"
            FAILED=true
          fi
          
          if (( $(echo "$BRANCHES < 83" | bc -l) )); then
            echo "‚ùå Branches coverage below 83%"
            FAILED=true
          fi
          
          if (( $(echo "$FUNCTIONS < 85" | bc -l) )); then
            echo "‚ùå Functions coverage below 85%"
            FAILED=true
          fi
          
          if (( $(echo "$LINES < 85" | bc -l) )); then
            echo "‚ùå Lines coverage below 85%"
            FAILED=true
          fi
          
          if [ "$FAILED" = true ]; then
            echo ""
            echo "üí• PR does not meet coverage requirements!"
            echo "Please add more tests before merging."
            exit 1
          else
            echo ""
            echo "‚úÖ Coverage requirements met! PR is ready for review."
          fi

  # Verificar que no hay conflictos de merge
  merge-check:
    name: Merge Conflict Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for merge conflicts
        run: |
          echo "üîÄ Checking for merge conflicts..."
          
          # Fetch the target branch
          git fetch origin ${{ github.base_ref }}
          
          # Try to merge (dry run) to check for conflicts
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
            echo "‚ùå Merge conflicts detected!"
            echo "Please resolve conflicts before merging."
            exit 1
          else
            echo "‚úÖ No merge conflicts detected."
          fi

      - name: Check PR size
        run: |
          echo "üìè Checking PR size..."
          
          # Count changed files and lines
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          ADDED_LINES=$(git diff --stat origin/${{ github.base_ref }}...HEAD | tail -1 | grep -o '[0-9]* insertion' | cut -d' ' -f1 || echo "0")
          DELETED_LINES=$(git diff --stat origin/${{ github.base_ref }}...HEAD | tail -1 | grep -o '[0-9]* deletion' | cut -d' ' -f1 || echo "0")
          
          echo "üìä PR Statistics:"
          echo "   Files changed: $CHANGED_FILES"
          echo "   Lines added: $ADDED_LINES"
          echo "   Lines deleted: $DELETED_LINES"
          
          if [ "$CHANGED_FILES" -gt 50 ]; then
            echo "‚ö†Ô∏è Large PR detected ($CHANGED_FILES files). Consider breaking it down."
          elif [ "$ADDED_LINES" -gt 1000 ]; then
            echo "‚ö†Ô∏è Large PR detected ($ADDED_LINES lines added). Consider breaking it down."
          else
            echo "‚úÖ PR size looks good."
          fi