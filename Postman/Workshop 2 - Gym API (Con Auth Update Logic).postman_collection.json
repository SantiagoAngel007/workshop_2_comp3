{
	"info": {
		"_postman_id": "4b4570a7-71b9-46c3-8888-70dca1d17ba6",
		"name": "Workshop 2 - Gym API (Con Auth Update Logic)",
		"description": "API para pruebas con nueva l√≥gica de autorizaci√≥n en UPDATE USER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44658492"
	},
	"item": [
		{
			"name": "üîê AUTH - LOGIN",
			"item": [
				{
					"name": "Login - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('admin_token', jsonData.token);",
									"    pm.collectionVariables.set('admin_id', jsonData.id);",
									"    console.log('‚úÖ Admin Token guardado');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login como admin - Guarda token en {{admin_token}}"
					},
					"response": []
				},
				{
					"name": "Login - Coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('coach_token', jsonData.token);",
									"    pm.collectionVariables.set('coach_id', jsonData.id);",
									"    console.log('‚úÖ Coach Token guardado');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"coach@example.com\",\n  \"password\": \"coach123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login como coach - Guarda token en {{coach_token}}"
					},
					"response": []
				},
				{
					"name": "Login - Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('client_token', jsonData.token);",
									"    pm.collectionVariables.set('client_id', jsonData.id);",
									"    console.log('‚úÖ Client Token guardado');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"client@example.com\",\n  \"password\": \"client123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login como client - Guarda token en {{client_token}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "‚úÖ CASOS EXITOSOS (POSITIVOS)",
			"item": [
				{
					"name": "‚úÖ Admin actualiza a otro usuario",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Coach Actualizado por Admin\",\n  \"age\": 29\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{coach_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{coach_id}}"
							]
						},
						"description": "‚úÖ DEBE FUNCIONAR: Admin actualiza el perfil de coach"
					},
					"response": []
				},
				{
					"name": "‚úÖ Cliente actualiza su propio perfil",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Cliente Actualizado\",\n  \"age\": 26\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{client_id}}"
							]
						},
						"description": "‚úÖ DEBE FUNCIONAR: Cliente actualiza su propio perfil"
					},
					"response": []
				},
				{
					"name": "‚úÖ Coach actualiza su propio perfil",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Coach Actualizado\",\n  \"age\": 29\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{coach_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{coach_id}}"
							]
						},
						"description": "‚úÖ DEBE FUNCIONAR: Coach actualiza su propio perfil"
					},
					"response": []
				}
			]
		},
		{
			"name": "‚ùå CASOS DE ERROR (NEGATIVOS)",
			"item": [
				{
					"name": "‚ùå Cliente intenta actualizar a otro usuario",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Hack Attempt\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{coach_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{coach_id}}"
							]
						},
						"description": "‚ùå DEBE FALLAR: Cliente intenta actualizar el perfil de coach - Error 403 Forbidden"
					},
					"response": []
				},
				{
					"name": "‚ùå Coach intenta actualizar a otro usuario",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Hack Attempt\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{client_id}}"
							]
						},
						"description": "‚ùå DEBE FALLAR: Coach intenta actualizar el perfil de cliente - Error 403 Forbidden"
					},
					"response": []
				},
				{
					"name": "‚ùå Sin autenticaci√≥n (Sin token)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Sin Token\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{client_id}}"
							]
						},
						"description": "‚ùå DEBE FALLAR: Sin token de autenticaci√≥n - Error 401 Unauthorized"
					},
					"response": []
				},
				{
					"name": "‚ùå Token inv√°lido/expirado",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_12345",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Token Inv√°lido\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{client_id}}"
							]
						},
						"description": "‚ùå DEBE FALLAR: Token inv√°lido - Error 401 Unauthorized"
					},
					"response": []
				},
				{
					"name": "‚ùå ID de usuario inexistente",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Usuario Inexistente\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "‚ùå DEBE FALLAR: ID de usuario no existe - Error 404 Not Found"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä VER USUARIOS Y DETALLES",
			"item": [
				{
					"name": "GET - Todos los usuarios",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Perfil de admin",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/{{admin_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{admin_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Perfil de coach",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/{{coach_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"{{coach_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "subscriptions tests",
			"item": [
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test para verificar que la petici√≥n fue exitosa (c√≥digo 201 Created o 200 OK)",
									"pm.test(\"Status code is 201 or 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);",
									"});",
									"",
									"// Script para guardar el token",
									"pm.test(\"Guardar el token de administrador\", function () {",
									"    // 1. Convertir la respuesta de texto a un objeto JSON",
									"    const responseBody = pm.response.json();",
									"    ",
									"    // 2. Verificar que la propiedad 'token' existe en la respuesta",
									"    pm.expect(responseBody).to.have.property(\"token\");",
									"    ",
									"    // 3. Guardar el valor del token en una variable de la colecci√≥n",
									"    // La variable se llamar√° \"admin_token\"",
									"    pm.collectionVariables.set(\"admin_token\", responseBody.token);",
									"    ",
									"    console.log(\"Token de administrador guardado exitosamente!\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"admin@example.com\",\n\"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "register new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test para verificar que la petici√≥n fue exitosa (c√≥digo 201 Created)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"// Script para guardar el ID del usuario",
									"pm.test(\"Guardar el ID del nuevo usuario\", function () {",
									"    // 1. Convertir la respuesta de texto a un objeto JSON",
									"    const responseBody = pm.response.json();",
									"    ",
									"    // 2. Verificar que la propiedad 'id' existe en la respuesta",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    ",
									"    // 3. Guardar el valor del ID en una variable de la colecci√≥n",
									"    // La variable se llamar√° \"userId\"",
									"    pm.collectionVariables.set(\"userId\", responseBody.id);",
									"    ",
									"    console.log(\"ID de usuario guardado exitosamente!\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"juan3@example.com\",\n  \"fullName\": \"Juan Perez tres\",\n  \"age\": 28,\n  \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "get subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc5MmNmODEyLWNjOGYtNGVhZS1iZjA3LTNiNWYwOTQ3ZmNiMyIsImVtYWlsIjoiYWRtaW5AZXhhbXBsZS5jb20iLCJpYXQiOjE3NjE0MDk2NTQsImV4cCI6MTc2MTQxMzI1NH0.mJNqdTb7-Z5SV1sFWUKdZm5JhmiEXU1uK5DCnARgiGM",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/subscriptions/user/58a62329-9c61-4d5d-9c3c-e8a3093dd33c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"subscriptions",
								"user",
								"58a62329-9c61-4d5d-9c3c-e8a3093dd33c"
							]
						}
					},
					"response": []
				},
				{
					"name": "update subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc5MmNmODEyLWNjOGYtNGVhZS1iZjA3LTNiNWYwOTQ3ZmNiMyIsImVtYWlsIjoiYWRtaW5AZXhhbXBsZS5jb20iLCJpYXQiOjE3NjE0MDk2NTQsImV4cCI6MTc2MTQxMzI1NH0.mJNqdTb7-Z5SV1sFWUKdZm5JhmiEXU1uK5DCnARgiGM",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Premium Subscription Package\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/subscriptions/e288c0b9-20d6-4c57-9f83-07bb61fd3e85",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"subscriptions",
								"e288c0b9-20d6-4c57-9f83-07bb61fd3e85"
							]
						}
					},
					"response": []
				},
				{
					"name": "get sub by id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc5MmNmODEyLWNjOGYtNGVhZS1iZjA3LTNiNWYwOTQ3ZmNiMyIsImVtYWlsIjoiYWRtaW5AZXhhbXBsZS5jb20iLCJpYXQiOjE3NjE0MDk2NTQsImV4cCI6MTc2MTQxMzI1NH0.mJNqdTb7-Z5SV1sFWUKdZm5JhmiEXU1uK5DCnARgiGM",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/subscriptions/e288c0b9-20d6-4c57-9f83-07bb61fd3e85",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"subscriptions",
								"e288c0b9-20d6-4c57-9f83-07bb61fd3e85"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all subscriptions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc5MmNmODEyLWNjOGYtNGVhZS1iZjA3LTNiNWYwOTQ3ZmNiMyIsImVtYWlsIjoiYWRtaW5AZXhhbXBsZS5jb20iLCJpYXQiOjE3NjE0MDk2NTQsImV4cCI6MTc2MTQxMzI1NH0.mJNqdTb7-Z5SV1sFWUKdZm5JhmiEXU1uK5DCnARgiGM",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/subscriptions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete sub",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc5MmNmODEyLWNjOGYtNGVhZS1iZjA3LTNiNWYwOTQ3ZmNiMyIsImVtYWlsIjoiYWRtaW5AZXhhbXBsZS5jb20iLCJpYXQiOjE3NjE0MDk2NTQsImV4cCI6MTc2MTQxMzI1NH0.mJNqdTb7-Z5SV1sFWUKdZm5JhmiEXU1uK5DCnARgiGM",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/subscriptions/e288c0b9-20d6-4c57-9f83-07bb61fd3e85",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"subscriptions",
								"e288c0b9-20d6-4c57-9f83-07bb61fd3e85"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üå± SEED",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/seed",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"seed"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string",
			"description": {
				"content": "Token del admin",
				"type": "text/plain"
			}
		},
		{
			"key": "admin_id",
			"value": "",
			"type": "string",
			"description": {
				"content": "ID del admin",
				"type": "text/plain"
			}
		},
		{
			"key": "coach_token",
			"value": "",
			"type": "string",
			"description": {
				"content": "Token del coach",
				"type": "text/plain"
			}
		},
		{
			"key": "coach_id",
			"value": "",
			"type": "string",
			"description": {
				"content": "ID del coach",
				"type": "text/plain"
			}
		},
		{
			"key": "client_token",
			"value": "",
			"type": "string",
			"description": {
				"content": "Token del client",
				"type": "text/plain"
			}
		},
		{
			"key": "client_id",
			"value": "",
			"type": "string",
			"description": {
				"content": "ID del client",
				"type": "text/plain"
			}
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}